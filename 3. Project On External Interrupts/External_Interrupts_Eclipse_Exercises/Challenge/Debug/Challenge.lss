
Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003a8  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ac  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_18>:
#include <avr/io.h>
#include <avr/interrupt.h>

/* External INT2 Interrupt Service Routine */
ISR(INT2_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	ef 93       	push	r30
  7a:	ff 93       	push	r31
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	if(PORTC == 9)	PORTC=0;
  84:	e5 e3       	ldi	r30, 0x35	; 53
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	89 30       	cpi	r24, 0x09	; 9
  8c:	21 f4       	brne	.+8      	; 0x96 <__vector_18+0x2a>
  8e:	e5 e3       	ldi	r30, 0x35	; 53
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	10 82       	st	Z, r1
  94:	05 c0       	rjmp	.+10     	; 0xa0 <__vector_18+0x34>
	else PORTC++;		
  96:	e5 e3       	ldi	r30, 0x35	; 53
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 83       	st	Z, r24
}
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	ff 91       	pop	r31
  a6:	ef 91       	pop	r30
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <INT2_Init>:

/* External INT2 enable and configuration function */
void INT2_Init(void){
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	SREG   &= ~(1<<7);      // Disable interrupts by clearing I-bit
  bc:	af e5       	ldi	r26, 0x5F	; 95
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	ef e5       	ldi	r30, 0x5F	; 95
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8c 93       	st	X, r24
	GICR   |= (1<<INT2);	// Enable external interrupt pin INT2
  ca:	ab e5       	ldi	r26, 0x5B	; 91
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	eb e5       	ldi	r30, 0x5B	; 91
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8c 93       	st	X, r24
	MCUCSR |= (1<<ISC2);    // Trigger INT2 with the raising edge
  d8:	a4 e5       	ldi	r26, 0x54	; 84
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e4 e5       	ldi	r30, 0x54	; 84
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8c 93       	st	X, r24
	SREG   |= (1<<7);       // Enable interrupts by setting I-bit
  e6:	af e5       	ldi	r26, 0x5F	; 95
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ef e5       	ldi	r30, 0x5F	; 95
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8c 93       	st	X, r24
}
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xFF; 			// Configure all pins in PORTC as output pins.
 102:	e4 e3       	ldi	r30, 0x34	; 52
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	80 83       	st	Z, r24
	PORTC = 0; 				// Initialization 7-seg display zero at the beginning.
 10a:	e5 e3       	ldi	r30, 0x35	; 53
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
	
	DDRB  &= (~(1<<PB2));   // Configure INT2/PB2 as input pin
 110:	a7 e3       	ldi	r26, 0x37	; 55
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e7 e3       	ldi	r30, 0x37	; 55
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	8c 93       	st	X, r24
	
	INT2_Init(); 			// Enable and configure external INT2
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <INT2_Init>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x28>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
